(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> grid() got an unexpected keyword argument 'custom_create_text'"
p3
sS'layer'
p4
S'/home/jing/documents/web2py/applications/GrantProposal/controllers/default.py'
p5
sS'code'
p6
S"# -*- coding: utf-8 -*-\n\nimport json\nfrom gluon.storage import Storage\n\n@auth.requires_login()\ndef index():\n    grid = SQLFORM.grid(\n        db.proposal.owner_ == auth.user.id,\n        fields=[db.proposal.title, db.proposal.funding_agency, db.proposal.due_date],\n        csv=False,\n        details=False,\n        searchable=False,\n        custom_create_text='Create Proposal',\n        custom_create_link=URL('update_proposal'),\n        custom_edit_link=lambda row: URL('update_proposal', args=str(row['id'])),\n    )\n    return locals()\n\ndef user():\n    form = auth()\n    return locals()\n\n@auth.requires_login()\ndef update_proposal():\n    _id = None\n    if len(request.args) > 0:\n        try:\n            _id = int(request.args[0])\n        except: pass\n\n    if _id != None:\n        rows = db(db.proposal.id == _id).select(db.proposal.owner_)\n        if len(rows) == 0 or rows[0]['owner_'] != auth.user.id:\n            redirect(URL('index'))\n\n    def get_list_from_field(a):\n        if type(a) is list:\n            return a\n        return [a]\n\n    if request.env.request_method == 'POST':\n        _vars = request.vars\n        ll = []\n        for field in investigator_fields:\n            ll.append([] if not field in _vars else get_list_from_field(_vars[field]))\n        if _id == None:\n            _vars.owner_ = auth.user.id\n        a = [x for x in zip(*ll) if set(x) != {''}]\n        _vars.investigators = json.dumps(a)\n        _vars.checklist = json.dumps(list(set(get_list_from_field(_vars.checklist))))\n        _vars = { k : getattr(_vars, k) for k in _vars if k in db.proposal.fields and k != 'id' }\n        if _id == None:\n            db.proposal.insert(**_vars)\n        else:\n            db(db.proposal.id == _id).update(**_vars)\n        redirect(URL('index'))\n\n    _vars = dict()\n    if _id != None:\n        rows = db(db.proposal.id == _id).select(db.proposal.ALL)\n        _vars = Storage(rows[0])\n        _vars.investigators = json.loads(_vars.investigators)\n        _vars.checklist = set(json.loads(_vars.checklist))\n\n    tmp = db.proposal.fields[:]\n    tmp.remove('owner_')\n    tmp.remove('investigators')\n    tmp.remove('checklist')\n    form = SQLFORM(db.proposal, _vars, showid=False, fields=tmp, _id='proposal_form')\n\n    def get(l, index, default):\n        if (type(l) is list and index < len(l)) or index in l:\n            return l[index]\n        return default\n\n    if _id != None:\n        checklist = get(_vars, 'checklist', [])\n        for option in db().select(db.checklist.name):\n            name = option['name']\n            form[0].insert(-1, TR(TD(LABEL(name), _class='w2p_fl'), TD(INPUT(_name='checklist', _class='checkbox', _type='checkbox', _value=name, _checked='checked' if name in checklist else None), _class='w2p_fw')))\n\n    investigators = get(_vars, 'investigators', [])\n\n    inv_entry = []\n    for j in range(len(investigator_fields)):\n        inv_entry.append(str(TD(LABEL(investigator_labels[j]), _class='w2p_fl'))+str(TD(INPUT(_name=investigator_fields[j], _class='string', _type='text'), _class='w2p_fw')))\n\n    for i in range(len(investigators)):\n        form[0].insert(-1, TR(TD(H5('Investigator'), _class='w2p_fl')))\n        entry = investigators[i]\n        for j in range(len(investigator_fields)):\n            form[0].insert(-1, TR(TD(LABEL(investigator_labels[j]), _class='w2p_fl'), TD(INPUT(_name=investigator_fields[j], _class='string', _type='text', _value=get(entry, j, '')), _class='w2p_fw')))\n\n    form[0].insert(-1, DIV('Add an investiator', _id='add_inv', _class='btn', _onclick='add_inv()'))\n\n    return dict(form=form, inv_entry=inv_entry, inv_header=TD(H5('Investigator'), _class='w2p_fl'))\n\nresponse._vars=response._caller(index)\n"
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/jing/documents/web2py/gluon/restricted.py", line 220, in restricted\n    exec ccode in environment\n  File "/home/jing/documents/web2py/applications/GrantProposal/controllers/default.py", line 99, in <module>\n  File "/home/jing/documents/web2py/gluon/globals.py", line 385, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/jing/documents/web2py/gluon/tools.py", line 3287, in f\n    return action(*a, **b)\n  File "/home/jing/documents/web2py/applications/GrantProposal/controllers/default.py", line 16, in index\n    custom_edit_link=lambda row: URL(\'update_proposal\', args=str(row[\'id\'])),\nTypeError: grid() got an unexpected keyword argument \'custom_create_text\'\n'
p11
s.